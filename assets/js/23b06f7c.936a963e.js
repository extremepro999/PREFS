"use strict";(self.webpackChunkprefs_docs=self.webpackChunkprefs_docs||[]).push([[158],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},f=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=a,m=u["".concat(s,".").concat(c)]||u[c]||d[c]||i;return t?r.createElement(m,l(l({ref:n},f),{},{components:t})):r.createElement(m,l({ref:n},f))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8690:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return f},default:function(){return u}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={id:"prefs-class",title:"PREFS class",sidebar_position:2,hide_title:!0},s="PREFS class",p={unversionedId:"API Reference/prefs-class",id:"version-0.1.9/API Reference/prefs-class",isDocsHomePage:!1,title:"PREFS class",description:"---",source:"@site/versioned_docs/version-0.1.9/API Reference/prefs-class.md",sourceDirName:"API Reference",slug:"/API Reference/prefs-class",permalink:"/PREFS/API Reference/prefs-class",editUrl:"https://github.com/Patitotective/PREFS/versioned_docs/version-0.1.9/API Reference/prefs-class.md",version:"0.1.9",sidebarPosition:2,frontMatter:{id:"prefs-class",title:"PREFS class",sidebar_position:2,hide_title:!0},sidebar:"version-0.1.9/tutorialSidebar",previous:{title:"Getting started",permalink:"/PREFS/start"},next:{title:"Methods",permalink:"/PREFS/API Reference/methods"}},f=[{value:"Init",id:"init",children:[]},{value:"Attributes",id:"attributes",children:[{value:"<code>file</code>",id:"file",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>read_prefs()</code>",id:"read_prefs",children:[]},{value:"<code>write_prefs()</code>",id:"write_prefs",children:[]},{value:"<code>overwrite_prefs()</code>",id:"overwrite_prefs",children:[]},{value:"<code>change_filename()</code>",id:"change_filename",children:[]},{value:"<code>delete_file()</code>",id:"delete_file",children:[]},{value:"<code>convert_to_json()</code>",id:"convert_to_json",children:[]},{value:"<code>convert_to_yaml()</code>",id:"convert_to_yaml",children:[]}]}],d={toc:f};function u(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefs-class"},"PREFS class"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"init"},"Init"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefs (dict)"),": A dictionary with the default preferences."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'filename (str, optional="prefs")'),": The name of the file (supports path)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'extension (str, optional="prefs")'),": The extension of the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'separator (str, optional="=")'),": The character between pref and value in the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'ender (str, optional="\\n")'),": The character at the end of each pref:value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'continuer (str, optional=">")'),": The character that precede a tree/cascade (nested dictionary)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interpret (bool, optional=True)"),": Interpret all the preferences as python, False will return all as strings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dictionary (bool, optional=False)"),": Writes the prefs as a python dictionary, no more human-readable (avoid any error at reading)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"verbose (bool, optional=False)"),": Print logs all operations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cascade (bool, optional=True)"),": Stores nested dictionaries as tree/cascade.")),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("p",null,"Ignoring the init attributes."),(0,i.kt)("h3",{id:"file"},(0,i.kt)("inlineCode",{parentName:"h3"},"file")),(0,i.kt)("p",null,"Easier way to access to the PREFS file. Equivalent to ",(0,i.kt)("a",{parentName:"p",href:"#readprefs"},(0,i.kt)("inlineCode",{parentName:"a"},"read_prefs()")),".",(0,i.kt)("br",{parentName:"p"}),"\n","Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    \"theme\": \"light\",\n    \"lang\": \"en\"\n    })\n\nprint(UserPrefs.file)\n\n>>> {'theme': 'light', 'lang': 'en'}\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"read_prefs"},(0,i.kt)("inlineCode",{parentName:"h3"},"read_prefs()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"read_prefs() -> dict\n")),(0,i.kt)("p",null,"Reads the PREFS file and returns it's value."),(0,i.kt)("p",null,"Arguments:\nDoesn't require any arguments.",(0,i.kt)("br",{parentName:"p"}),"\n","Returns:\nA dictionary reading the PREFS file."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    })\n\n\nprint(UserPrefs.read_prefs())\n\n>>> {\'theme\': \'light\', \'lang\': \'en\'}\n')),(0,i.kt)("h3",{id:"write_prefs"},(0,i.kt)("inlineCode",{parentName:"h3"},"write_prefs()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"write_prefs(pref: str, value: any) -> None\n")),(0,i.kt)("p",null,"Reads the PREFS file and changes the given key to the given value."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pref (str)"),": The name of the pref to modify or create if it doesn't exist."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value (any)"),": The value to assign to the given pref.")),(0,i.kt)("p",null,"Returns:",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nprint(UserPrefs.file["lang"]) # Getting the lang value from the PREFS and printing it\n>>> en\n\nUserPrefs.write_prefs("lang", "es") # Changing the lang value from en to es\n\nprint(UserPrefs.file["lang"]) # Getting the lang value from the PREFS and printing it\n>>> es\n')),(0,i.kt)("p",null,"To change the value of a nested dictionary pass a path of keys to find the value you want.\nExample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nprint(UserPrefs.file["keybindings"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {\'Copy\': \'Ctrl+C\', \'Paste\': \'Ctrl+V\', \'Cut\': \'Ctrl+X\'}\n\nUserPrefs.write_prefs("keybindings/Copy", "Ctrl+D") # Changing the Copy value inside the dictionary keybindings inside the PREFS file from Ctrl+C to Ctrl+D\n\nprint(UserPrefs.file["keybindings"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {\'Copy\': \'Ctrl+D\', \'Paste\': \'Ctrl+V\', \'Cut\': \'Ctrl+X\'}\n')),(0,i.kt)("p",null,"Another example creating a new pref in a nested dictionary:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nprint(UserPrefs.file["keybindings"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {\'Copy\': \'Ctrl+D\', \'Paste\': \'Ctrl+V\', \'Cut\': \'Ctrl+X\'}\n\nUserPrefs.write_prefs("keybindings/Quit", "Ctrl+Q") # Creating the Quit pref inside keybindings dictionary inside the PREFS file with Ctrl+Q as value\n\nprint(UserPrefs.file["keybindings"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {\'Copy\': \'Ctrl+D\', \'Paste\': \'Ctrl+V\', \'Cut\': \'Ctrl+X\', \'Quit\': \'Ctrl+Q\'}\n')),(0,i.kt)("h3",{id:"overwrite_prefs"},(0,i.kt)("inlineCode",{parentName:"h3"},"overwrite_prefs()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"overwrite_prefs(prefs: dict=None) -> None\n")),(0,i.kt)("p",null,"Overwrites the PREFS file with the default PREFS, if passed dictionary in prefs parameter overwrites PREFS file with these."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefs (dict, optional=None)"),": A dictionary to overwrites the PREFS file with, if passed ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," overwrites PREFS file with default PREFS.")),(0,i.kt)("p",null,"Returns:\n",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    \"theme\": \"light\",\n    \"lang\": \"en\",\n    \"keybindings\": {\"Copy\": \"Ctrl+C\", \"Paste\": \"Ctrl+V\", \"Cut\": \"Ctrl+X\"}\n    }) # Creating an PREFS instance\n\n\nUserPrefs.overwrite_prefs() # Overwriting the PREFS file with the default PREFS\n\nprint(UserPrefs.file) # Getting PREFS with file attribute and printing it\n\n>>> {'theme': 'light', 'lang': 'en', 'keybindings': {'Copy': 'Ctrl+C', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}}\n\nUserPrefs.write_prefs(\"lang\", \"es\") # Changing the lang value from en to es\n\nprint(UserPrefs.file) # Getting PREFS with file attribute and printing it\n\n>>> {'theme': 'light', 'lang': 'es', 'keybindings': {'Copy': 'Ctrl+C', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}}\n\n")),(0,i.kt)("p",null,"The first time we run the above example the program will do this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Define an instance of the PREFS class and pass a default PREFS"),(0,i.kt)("li",{parentName:"ul"},"Overwrite the PREFS file with the default ones."),(0,i.kt)("li",{parentName:"ul"},"Print the PREFS file"),(0,i.kt)("li",{parentName:"ul"},"Change the ",(0,i.kt)("inlineCode",{parentName:"li"},"lang")," pref from en to es"),(0,i.kt)("li",{parentName:"ul"},"Print again the PREFS file.")),(0,i.kt)("p",null,"The second time will do this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Define an instance of the PREFS class and pass a default PREFS"),(0,i.kt)("li",{parentName:"ul"},"Overwrite the PREFS file that contains the modified ",(0,i.kt)("inlineCode",{parentName:"li"},"lang")," pref with the default PREFS.")),(0,i.kt)("p",null,"So the program will always has the same output because we overwrite the old PREFS with the default PREFS."),(0,i.kt)("h3",{id:"change_filename"},(0,i.kt)("inlineCode",{parentName:"h3"},"change_filename()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"change_filename(filename: str) -> None\n")),(0,i.kt)("p",null,"This method will change the name of the PREFS file if it exists.",(0,i.kt)("br",{parentName:"p"}),"\n","But when you init the PREFS instance you have passed another value in filename so if you don't change that value to new name of the file, PREFS will search for the old filename and create a new one because he couldn't find the old one."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename (str)"),": The new filename of the PREFS file.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nUserPrefs.change_filename("otherFilename") # Changing the name of the PREFS file from prefs to otherFilename\n\n')),(0,i.kt)("h3",{id:"delete_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"delete_file()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"delete_file() -> None\n")),(0,i.kt)("p",null,"Deletes the PREFS file if it exists."),(0,i.kt)("p",null,"Arguments: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),(0,i.kt)("br",{parentName:"p"}),"\n","Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nUserPrefs.delete_file() # Delete the PREFS file\n\n')),(0,i.kt)("h3",{id:"convert_to_json"},(0,i.kt)("inlineCode",{parentName:"h3"},"convert_to_json()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'convert_to_json(filename: str="", extension: str="json", **kwargs) -> None\n')),(0,i.kt)("p",null,"Converts the PREFS file into a JSON file."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'filename (str, optional="")'),": The name of the JSON file, if empty the same name of the PREFS file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'extension (str, optional="json")'),": The extension of the JSON file, json as default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"**kwargs"),": This kwargs will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"json.load")," function, in case you want certain configuration to load the JSON file  ")),(0,i.kt)("p",null,"Returns:\n",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nUserPrefs.convert_to_json() # Coverts the PREFS file into a JSON one\n\n')),(0,i.kt)("h3",{id:"convert_to_yaml"},(0,i.kt)("inlineCode",{parentName:"h3"},"convert_to_yaml()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'convert_to_yaml(filename: str="", extension: str="yaml", Loader=yaml.loader.SafeLoader, **kwargs) -> None\n')),(0,i.kt)("p",null,"Converts the PREFS file into a YAML file."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'filename (str, optional="")'),": The name of the YAML file, if empty the same name of the PREFS file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'extension (str, optional="yaml")'),": The extension of the YAML file, yaml as default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Loader (optional=yaml.loader.SafeLoader)"),": YAML loader for ",(0,i.kt)("inlineCode",{parentName:"li"},"yaml.load")," function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"**kwargs"),": This kwargs will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"yaml.load")," function, in case you want certain configuration to load the YAML file  ")),(0,i.kt)("p",null,"Returns:\n",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    }) # Creating an PREFS instance\n\nUserPrefs.convert_to_yaml() # Coverts the PREFS file into a YAML one\n\n')))}u.isMDXComponent=!0}}]);