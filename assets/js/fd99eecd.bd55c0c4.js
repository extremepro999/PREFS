"use strict";(self.webpackChunkprefs_docs=self.webpackChunkprefs_docs||[]).push([[904],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=a.createContext({}),u=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=u(n),c=l,k=s["".concat(d,".").concat(c)]||s[c]||m[c]||i;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7353:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return p},default:function(){return s}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],o={id:"changelog",title:"Changelog",hide_title:!0,sidebar_position:5},d="Changelog",u={unversionedId:"about/changelog",id:"about/changelog",isDocsHomePage:!1,title:"Changelog",description:"v0.2.56 (16/10/2021)",source:"@site/docs/about/CHANGELOG.md",sourceDirName:"about",slug:"/about/changelog",permalink:"/PREFS/docs/next/about/changelog",editUrl:"https://github.com/Patitotective/PREFS/tree/main/website/docs/about/CHANGELOG.md",tags:[],version:"current",lastUpdatedBy:"Patitotective",lastUpdatedAt:1634426265,formattedLastUpdatedAt:"10/16/2021",sidebarPosition:5,frontMatter:{id:"changelog",title:"Changelog",hide_title:!0,sidebar_position:5},sidebar:"about",previous:{title:"Support",permalink:"/PREFS/docs/next/about/support"},next:{title:"License",permalink:"/PREFS/docs/next/about/license"}},p=[{value:"v0.2.56 (16/10/2021)",id:"v0256-16102021",children:[],level:3},{value:"v0.2.51 (24/09/2021)",id:"v0251-24092021",children:[],level:3},{value:"v0.2.50 (16/09/2021)",id:"v0250-16092021",children:[],level:3},{value:"v0.2 (17/08/2021)",id:"v02-17082021",children:[],level:3},{value:"v0.1.99 (16/08/2021)",id:"v0199-16082021",children:[],level:3},{value:"v0.1.98 (08/08/2021)",id:"v0198-08082021",children:[],level:3},{value:"v0.1.95 (08/08/2021)",id:"v0195-08082021",children:[],level:3},{value:"v0.1.91 (07/08/2021)",id:"v0191-07082021",children:[],level:3},{value:"v0.1.9 (07/08/2021)",id:"v019-07082021",children:[],level:3},{value:"v0.1.8 (31/07/2021)",id:"v018-31072021",children:[],level:3},{value:"v0.1.7 (20/07/2021)",id:"v017-20072021",children:[],level:3},{value:"0.1.6 (18/07/2021)",id:"016-18072021",children:[],level:3},{value:"0.1.4 (16/07/2021)",id:"014-16072021",children:[],level:3},{value:"0.1.3 (11/07/2021)",id:"013-11072021",children:[],level:3},{value:"0.0.86 (17/06/2021)",id:"0086-17062021",children:[],level:3},{value:"0.0.85 (16/06/2021)",id:"0085-16062021",children:[],level:3},{value:"0.0.81 (05/06/2021)",id:"0081-05062021",children:[],level:3},{value:"0.0.80 (05/06/2021)",id:"0080-05062021",children:[],level:3},{value:"0.0.65 (04/05/2021)",id:"0065-04052021",children:[],level:3},{value:"0.0.6 (04/05/2021)",id:"006-04052021",children:[],level:3},{value:"0.0.46 (04/05/2021)",id:"0046-04052021",children:[],level:3},{value:"0.0.45 (02/05/2021)",id:"0045-02052021",children:[],level:3},{value:"0.0.4 (02/05/2021)",id:"004-02052021",children:[],level:3},{value:"0.0.3 (02/05/2021)",id:"003-02052021",children:[],level:3},{value:"0.0.2 (01/05/2021)",id:"002-01052021",children:[],level:3},{value:"0.0.1 (01/05/2021)",id:"001-01052021",children:[],level:3}],m={toc:p};function s(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"changelog"},"Changelog"),(0,i.kt)("h3",{id:"v0256-16102021"},"v0.2.56 (16/10/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added resources suport so you can build your app without any issue."),(0,i.kt)("li",{parentName:"ul"},"Added CLI tool."),(0,i.kt)("li",{parentName:"ul"},"Cleaned directory tree."),(0,i.kt)("li",{parentName:"ul"},"Fixed small bugs."),(0,i.kt)("li",{parentName:"ul"},"Renamed ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFSBase")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"PrefsBase"),"."),(0,i.kt)("li",{parentName:"ul"},"Renamed ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"Prefs"),"."),(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"separator_char, ender_char, continuer_char, comment_char, interpret, cascade")," parameters from ",(0,i.kt)("inlineCode",{parentName:"li"},"PrefsBase")," class.")),(0,i.kt)("h3",{id:"v0251-24092021"},"v0.2.51 (24/09/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed bug filename has no path (",(0,i.kt)("inlineCode",{parentName:"li"},"prefs.prefs"),").")),(0,i.kt)("h3",{id:"v0250-16092021"},"v0.2.50 (16/09/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"PREFSBase")," class"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Now ",(0,i.kt)("inlineCode",{parentName:"li"},"filename")," parameter includes the extension too."),(0,i.kt)("li",{parentName:"ul"},"Fixed path detection on ",(0,i.kt)("inlineCode",{parentName:"li"},"create_prefs")),(0,i.kt)("li",{parentName:"ul"},"Now writes the representation of a string, not just the string with quotes around it."),(0,i.kt)("li",{parentName:"ul"},"Now it uses ",(0,i.kt)("inlineCode",{parentName:"li"},"ast.literal_eval")," insead of ",(0,i.kt)("inlineCode",{parentName:"li"},"eval")," to evaluate strings."),(0,i.kt)("li",{parentName:"ul"},"Now ",(0,i.kt)("inlineCode",{parentName:"li"},"separator_char"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ender_char"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"continuer_char")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"comment_char")," are constantes (no parameters)."),(0,i.kt)("li",{parentName:"ul"},"Now ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," attribute it's an property method that calls ",(0,i.kt)("inlineCode",{parentName:"li"},"read_prefs"),"."),(0,i.kt)("li",{parentName:"ul"},"Removed ",(0,i.kt)("inlineCode",{parentName:"li"},"dictionary")," parameter."),(0,i.kt)("li",{parentName:"ul"},"Setted split to 1 when splitting key and value."),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"dump")," method that returns an string with ",(0,i.kt)("inlineCode",{parentName:"li"},"prefs")," dictionary as PREFS format."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added ",(0,i.kt)("inlineCode",{parentName:"p"},"VERSION")," constant variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added ",(0,i.kt)("inlineCode",{parentName:"p"},"split_path")," function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added ",(0,i.kt)("inlineCode",{parentName:"p"},"accumulate_list")," function."))),(0,i.kt)("h3",{id:"v02-17082021"},"v0.2 (17/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"write_multiple_prefs")," function which requires a list of prefs and a list of values to change. With this function writing multiple prefs will be more efficiently. ")),(0,i.kt)("h3",{id:"v0199-16082021"},"v0.1.99 (16/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"auto_generate_keys")," parameter. ")),(0,i.kt)("h3",{id:"v0198-08082021"},"v0.1.98 (08/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"indent")," parameter. "),(0,i.kt)("li",{parentName:"ul"},"Comment your own PREFS files (and change the comment character ",(0,i.kt)("inlineCode",{parentName:"li"},"#"),").")),(0,i.kt)("h3",{id:"v0195-08082021"},"v0.1.95 (08/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deleted ",(0,i.kt)("inlineCode",{parentName:"li"},"readPREFS.py")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"createPREFS.py"),"."),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS_Base")," class and changed ",(0,i.kt)("inlineCode",{parentName:"li"},"read_prefs_file")," function and ",(0,i.kt)("inlineCode",{parentName:"li"},"convert_to_prefs")," function using ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS_Base")," class.")),(0,i.kt)("h3",{id:"v0191-07082021"},"v0.1.91 (07/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Replaced:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},"import sys; sys.path.append(os.path.dirname(os.path.realpath(__file__)))\n\nfrom readPREFS import ReadPREFS\nfrom createPREFS import CreatePREFS\n")),(0,i.kt)("p",{parentName:"li"},"With:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if __name__ == '__main__':\n    from readPREFS import ReadPREFS\n    from createPREFS import CreatePREFS\nelse:\n    from .readPREFS import ReadPREFS\n    from .createPREFS import CreatePREFS\n")))),(0,i.kt)("h3",{id:"v019-07082021"},"v0.1.9 (07/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Changed all function names accord to PEP8:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.ReadPrefs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.read_prefs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.WritePrefs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.write_prefs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.OverWritePrefs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.overwrite_prefs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.ChangeFilename")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.change_filename")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.ConvertToJson")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.convert_to_json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReadJsonFile")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"read_json_file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReadPREFSFile")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"read_prefs_file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ConvertToPREFS")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"convert_to_prefs")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Added ",(0,i.kt)("inlineCode",{parentName:"p"},"PREFS.convert_to_yaml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read_yaml_file"),"."))),(0,i.kt)("h3",{id:"v018-31072021"},"v0.1.8 (31/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed bug when creating a pref with an empty dictionary as value.")),(0,i.kt)("h3",{id:"v017-20072021"},"v0.1.7 (20/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"ConvertToPREFS()")," function (outside PRFS class) that do the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"dumps()")," in json. Converts a dictionary into a PREFS file but instead of writing the PREFS in a file returns it as string."),(0,i.kt)("li",{parentName:"ul"},"Changed ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadPrefs()")," function name (outside PREFS class) to ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadPREFSFile()"),"."),(0,i.kt)("li",{parentName:"ul"},"Fixed issue when dictionary=True parameter, fixed issue when dictionary=True and interpret=True parameter.")),(0,i.kt)("h3",{id:"016-18072021"},"0.1.6 (18/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ReadPrefs function outside PREFS class that reads a PREFS file and return it's value.")),(0,i.kt)("h3",{id:"014-16072021"},"0.1.4 (16/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed error when overwriting prefs and using a lambda function.")),(0,i.kt)("h3",{id:"013-11072021"},"0.1.3 (11/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added tree/cascade (nested dictionaries) support."),(0,i.kt)("li",{parentName:"ul"},"Added docstring.")),(0,i.kt)("h3",{id:"0086-17062021"},"0.0.86 (17/06/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed path support, fixed ChangeFilename function, added debug parameter.")),(0,i.kt)("h3",{id:"0085-16062021"},"0.0.85 (16/06/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed little issues.")),(0,i.kt)("h3",{id:"0081-05062021"},"0.0.81 (05/06/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added dictionary write mode and support path file.")),(0,i.kt)("h3",{id:"0080-05062021"},"0.0.80 (05/06/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ChangeFilename() function and ReWritePrefs() function.")),(0,i.kt)("h3",{id:"0065-04052021"},"0.0.65 (04/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set max split as 1.")),(0,i.kt)("h3",{id:"006-04052021"},"0.0.6 (04/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Now you can choose your PREFS ender, line break is predetermined, remember don't put a character that is on your PREFS because program fails.")),(0,i.kt)("h3",{id:"0046-04052021"},"0.0.46 (04/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed error with lambda.")),(0,i.kt)("h3",{id:"0045-02052021"},"0.0.45 (02/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Now in class PREFS argument PREFS you must pass a lambda: function for not execute the function always, only when file is lost.")),(0,i.kt)("h3",{id:"004-02052021"},"0.0.4 (02/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added python interpreter for pref values (using ast library)")),(0,i.kt)("h3",{id:"003-02052021"},"0.0.3 (02/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name change")),(0,i.kt)("h3",{id:"002-01052021"},"0.0.2 (01/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"...")),(0,i.kt)("h3",{id:"001-01052021"},"0.0.1 (01/05/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First Release")))}s.isMDXComponent=!0}}]);