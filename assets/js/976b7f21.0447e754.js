"use strict";(self.webpackChunkprefs_docs=self.webpackChunkprefs_docs||[]).push([[641],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),u=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,k=c["".concat(d,".").concat(m)]||c[m]||s[m]||i;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1391:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"changelog",title:"Change log",hide_title:!0,sidebar_position:5},d="Change Log",u={unversionedId:"About/changelog",id:"About/changelog",isDocsHomePage:!1,title:"Change log",description:"v0.1.98 (08/08/2021)",source:"@site/docs/About/CHANGELOG.md",sourceDirName:"About",slug:"/About/changelog",permalink:"/PREFS/next/About/changelog",editUrl:"https://github.com/Patitotective/PREFS/docs/About/CHANGELOG.md",version:"current",sidebarPosition:5,frontMatter:{id:"changelog",title:"Change log",hide_title:!0,sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Help",permalink:"/PREFS/next/About/help"},next:{title:"License",permalink:"/PREFS/next/About/license"}},p=[],s={toc:p};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"change-log"},"Change Log"),(0,i.kt)("h4",{id:"v0198-08082021"},"v0.1.98 (08/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"indent")," parameter. "),(0,i.kt)("li",{parentName:"ul"},"Comment your own PREFS files (and change the comment character ",(0,i.kt)("inlineCode",{parentName:"li"},"#"),").")),(0,i.kt)("h4",{id:"v0195-08082021"},"v0.1.95 (08/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deleted ",(0,i.kt)("inlineCode",{parentName:"li"},"readPREFS.py")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"createPREFS.py"),"."),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS_Base")," class and changed ",(0,i.kt)("inlineCode",{parentName:"li"},"read_prefs_file")," function and ",(0,i.kt)("inlineCode",{parentName:"li"},"convert_to_prefs")," function using ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS_Base")," class.")),(0,i.kt)("h4",{id:"v0191-07082021"},"v0.1.91 (07/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Replaced:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},"import sys; sys.path.append(os.path.dirname(os.path.realpath(__file__)))\n\nfrom readPREFS import ReadPREFS\nfrom createPREFS import CreatePREFS\n")),(0,i.kt)("p",{parentName:"li"},"With:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},"if __name__ == '__main__':\n    from readPREFS import ReadPREFS\n    from createPREFS import CreatePREFS\nelse:\n    from .readPREFS import ReadPREFS\n    from .createPREFS import CreatePREFS\n")))),(0,i.kt)("h4",{id:"v019-07082021"},"v0.1.9 (07/08/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Changed all function names accord to PEP8:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.ReadPrefs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.read_prefs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.WritePrefs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.write_prefs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.OverWritePrefs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.overwrite_prefs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.ChangeFilename")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.change_filename")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.ConvertToJson")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.convert_to_json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReadJsonFile")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"read_json_file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReadPREFSFile")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"read_prefs_file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ConvertToPREFS")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"convert_to_prefs"))))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"PREFS.convert_to_yaml")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"read_yaml_file"),".")),(0,i.kt)("h4",{id:"v018-31072021"},"v0.1.8 (31/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed bug when creating a pref with an empty dictionary as value.")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"v017-20072021"},"v0.1.7 (20/07/2021)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"ConvertToPREFS()")," function (outside PRFS class) that do the same as ",(0,i.kt)("inlineCode",{parentName:"li"},"dumps()")," in json. Converts a dictionary into a PREFS file but instead of writing the PREFS in a file returns it as string."),(0,i.kt)("li",{parentName:"ul"},"Changed ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadPrefs()")," function name (outside PREFS class) to ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadPREFSFile()"),"."),(0,i.kt)("li",{parentName:"ul"},"Fixed issue when dictionary=True parameter, fixed issue when dictionary=True and interpret=True parameter.")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"016-18072021"},"0.1.6 (18/07/2021)"),(0,i.kt)("p",null,"Added ReadPrefs function outside PREFS class that reads a PREFS file and return it's value."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"014-16072021"},"0.1.4 (16/07/2021)"),(0,i.kt)("p",null,"Fixed error when overwriting prefs and using a lambda function."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"013-11072021"},"0.1.3 (11/07/2021)"),(0,i.kt)("p",null,"Added tree/cascade (nested dictionaries) support."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Added docstring."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0086-17062021"},"0.0.86 (17/06/2021)"),(0,i.kt)("p",null,"Fixed path support, fixed ChangeFilename function, added debug parameter."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0085-16062021"},"0.0.85 (16/06/2021)"),(0,i.kt)("p",null,"Fixed little issues."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0081-05062021"},"0.0.81 (05/06/2021)"),(0,i.kt)("p",null,"Added dictionary write mode and support path file."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0080-05062021"},"0.0.80 (05/06/2021)"),(0,i.kt)("p",null,"Added ChangeFilename() function and ReWritePrefs() function."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0065-04052021"},"0.0.65 (04/05/2021)"),(0,i.kt)("p",null,"Set max split as 1."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"006-04052021"},"0.0.6 (04/05/2021)"),(0,i.kt)("p",null,"Now you can choose your PREFS ender, line break is predetermined, remember don't put a character that is on your PREFS because program fails."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0046-04052021"},"0.0.46 (04/05/2021)"),(0,i.kt)("p",null,"Fixed error with lambda."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"0045-02052021"},"0.0.45 (02/05/2021)"),(0,i.kt)("p",null,"Now in class PREFS argument PREFS you must pass a lambda: function for not execute the function always, only when file is lost."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"004-02052021"},"0.0.4 (02/05/2021)"),(0,i.kt)("p",null,"Added python interpreter for pref values (using ast library)"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"003-02052021"},"0.0.3 (02/05/2021)"),(0,i.kt)("p",null,"Name change"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"002-01052021"},"0.0.2 (01/05/2021)"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"001-01052021"},"0.0.1 (01/05/2021)"),(0,i.kt)("p",null,"First Release"))}c.isMDXComponent=!0}}]);