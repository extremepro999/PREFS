"use strict";(self.webpackChunkprefs_docs=self.webpackChunkprefs_docs||[]).push([[461],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2356:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"methods",title:"Methods",sidebar_position:3,hide_title:!0},s="Methods",p={unversionedId:"API Reference/methods",id:"version-0.1.9/API Reference/methods",isDocsHomePage:!1,title:"Methods",description:"---",source:"@site/versioned_docs/version-0.1.9/API Reference/methods.md",sourceDirName:"API Reference",slug:"/API Reference/methods",permalink:"/PREFS/0.1.9/API Reference/methods",editUrl:"https://github.com/Patitotective/PREFS/versioned_docs/version-0.1.9/API Reference/methods.md",version:"0.1.9",sidebarPosition:3,frontMatter:{id:"methods",title:"Methods",sidebar_position:3,hide_title:!0},sidebar:"version-0.1.9/tutorialSidebar",previous:{title:"PREFS class",permalink:"/PREFS/0.1.9/API Reference/prefs-class"},next:{title:"Help",permalink:"/PREFS/0.1.9/About/help"}},d=[{value:"<code>read_prefs_file()</code>",id:"read_prefs_file",children:[]},{value:"<code>convert_to_prefs()</code>",id:"convert_to_prefs",children:[]},{value:"<code>read_json_file()</code>",id:"read_json_file",children:[]},{value:"<code>read_yaml_file()</code>",id:"read_yaml_file",children:[]}],c={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"methods"},"Methods"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"read_prefs_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"read_prefs_file()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'ReadPrefs(filename: str, extension: str="prefs", separator: str="=", ender: str="\\n", continuer: str=">", \n        interpret: bool=True, dictionary: bool=False, verbose: bool=False, cascade: bool=True) -> dict\n')),(0,i.kt)("p",null,"Given the filename of PREFS file returns it's value."),(0,i.kt)("p",null,"The arguments are the almost the same as PREFS class."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'filename (str, optional="prefs")'),": The name of the file (supports path)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'extension (str, optional="prefs")'),": The extension of the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'separator (str, optional="=")'),": The character between pref and value in the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'ender (str, optional="\\n")'),": The character at the end of each pref:value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'continuer (str, optional=">")'),": The character that precede a tree/cascade (nested dictionary)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interpret (bool, optional=True)"),": Interpret all the preferences as python, False will return all as strings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dictionary (bool, optional=False)"),": Writes the prefs as a python dictionary, no more human-readable."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"verbose (bool, optional=False)"),": Print logs all operations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cascade (bool, optional=True)"),": Stores nested dictionaries as tree/cascade."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'indent (str, optional="\\t")'),": If cascade the indentation when nested dictionaries.")),(0,i.kt)("p",null,"Returns:\nA dictionary with the PREFS of the given PREFS filename."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\n# Instead of doing this\n"""\nUserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en"\n    })\n"""\n\n# Create manually a PREFS file with the default PREFS and read it using `read_prefs_file`\nUserPrefs = PREFS.PREFS(prefs = PREFS.read_prefs_file("prefs"))\n\nprint(UserPrefs.file)\n\n>>> {\'theme\': \'light\', \'lang\': \'en\'}\n')),(0,i.kt)("p",null,"This is the ",(0,i.kt)("inlineCode",{parentName:"p"},"prefs")," file given as the default PREFS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#PREFS\ntheme='light'\nlang='en'\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"TIP")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Remember to write quotes around all the strings (or set ",(0,i.kt)("a",{parentName:"p",href:"#readprefsfile"},(0,i.kt)("inlineCode",{parentName:"a"},"interpret"))," to ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),")"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"convert_to_prefs"},(0,i.kt)("inlineCode",{parentName:"h3"},"convert_to_prefs()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'convert_to_prefs(prefs: dict, separator: str="=", ender: str="\\n", continuer: str=">", \n        interpret: bool=True, dictionary: bool=False, verbose: bool=False, cascade: bool=True) -> str\n')),(0,i.kt)("p",null,"Converts the given dictionary into PREFS format and returns it as string (similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"dump")," function in ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"):"),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefs (dict)"),": A dictionary with the default preferences to write in the PREFS file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'separator (str, optional="=")'),": The character between pref and value in the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'ender (str, optional="\\n")'),": The character at the end of each pref:value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'continuer (str, optional=">")'),": The character that precede a tree/cascade (nested dictionary)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interpret (bool, optional=True)"),": Interpret all the preferences as python, False will return all as strings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dictionary (bool, optional=False)"),": Writes the prefs as a python dictionary, no more human-readable."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"verbose (bool, optional=False)"),": Print logs all operations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cascade (bool, optional=True)"),": Stores nested dictionaries as tree/cascade."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'indent (str, optional="\\t")'),": If cascade the indentation when nested dictionaries.")),(0,i.kt)("p",null,"Returns:\nA string with the given dictionary in PREFS format. "),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nprefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    } # Defining a dictionary with a example of default PREFS\n\nPREFSrepresentation = PREFS.convert_to_prefs(prefs) # Converting prefs dictionary into PREFS format\n\nprint(PREFSrepresentation) # Printing the PREFSrepresentation of prefs dictionary\n\n>>> \n#PREFS\ntheme=\'light\'\nlang=\'en\'\nkeybindings=>\n    Copy=\'Ctrl+C\'\n    Paste=\'Ctrl+V\'\n    Cut=\'Ctrl+X\'\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"read_json_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"read_json_file()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'read_json_file(filename: str, extension: str="json", **kwargs) -> dict\n')),(0,i.kt)("p",null,"Reads a JSON file and returns it's value."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename (str)"),": The name of JSON file to read."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'extension (str, optional="json")'),": The extension of the file to read, json as default.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nprefs = PREFS.read_json_file("someJSONFile") # Read someJSONFile and store it\'s value in prefs\nJSONPrefs = PREFS.PREFS(prefs, filename="jsonPrefs") # Create an instance of the PREFS class using a json file as input for the prefs argument\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"read_yaml_file"},(0,i.kt)("inlineCode",{parentName:"h3"},"read_yaml_file()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'read_yaml_file(filename: str, extension: str="yaml", **kwargs) -> dict\n')),(0,i.kt)("p",null,"Reads a YAML file and returns it's value."),(0,i.kt)("p",null,"Arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename (str)"),": The name of YAML file to read."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'extension (str, optional="yaml")'),": The extension of the file to read, yaml as default.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import PREFS\n\nprefs = PREFS.read_yaml_file("someYAMLFile") # Read someYAMLFile and store it\'s value in prefs\nYAMLPrefs = PREFS.PREFS(prefs, filename="yamlPrefs") # Create an instance of the PREFS class using a yaml file as input for the prefs argument\n')))}u.isMDXComponent=!0}}]);