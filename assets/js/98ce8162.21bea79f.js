"use strict";(self.webpackChunkprefs_docs=self.webpackChunkprefs_docs||[]).push([[543],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),f=r,h=u["".concat(s,".").concat(f)]||u[f]||c[f]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(e,t,n){n(7294)},5064:function(e,t,n){n(7294),n(9443)},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},8588:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=(n(5064),n(8215),["components"]),o={id:"start",title:"Getting started",sidebar_position:1,hide_title:!0},s="Getting started",p={unversionedId:"start",id:"start",isDocsHomePage:!1,title:"Getting started",description:"---",source:"@site/docs/start.md",sourceDirName:".",slug:"/start",permalink:"/PREFS/next/start",editUrl:"https://github.com/Patitotective/PREFS/docs/start.md",version:"current",sidebarPosition:1,frontMatter:{id:"start",title:"Getting started",sidebar_position:1,hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"What is PREFS?",permalink:"/PREFS/next/"},next:{title:"PREFS class",permalink:"/PREFS/next/API Reference/prefs-class"}},d=[{value:"Installation and import",id:"installation-and-import",children:[]},{value:"Create PREFS",id:"create-prefs",children:[]},{value:"Read PREFS",id:"read-prefs",children:[]},{value:"Write PREFS",id:"write-prefs",children:[]}],c={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting started"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"installation-and-import"},"Installation and import"),(0,i.kt)("p",null,"To install PREFS you need to have pip installed (if you don't have it installed see ",(0,i.kt)("a",{parentName:"p",href:"https://pip.pypa.io/en/stable/installation/"},"Pypi installation"),"):"),(0,i.kt)("p",null,"Windows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install PREFS\n")),(0,i.kt)("p",null,"MacOS and Linux:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install PREFS\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"TIP")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you want to install the v0.1.9 and not the latest use ",(0,i.kt)("inlineCode",{parentName:"p"},"PREFS=0.1.9"),".",(0,i.kt)("br",{parentName:"p"}),"\n","Or if you already have PREFS and you want to upgrade it use ",(0,i.kt)("inlineCode",{parentName:"p"},"PREFS --upgrade")," (and look at the ",(0,i.kt)("a",{parentName:"p",href:"https://patitotective.github.io/PREFS/"},"latest version of the documentation"),")."))),(0,i.kt)("p",null,"Once you have installed PREFS correctly create a new python file and import PREFS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import PREFS\n")),(0,i.kt)("h2",{id:"create-prefs"},"Create PREFS"),(0,i.kt)("p",null,"To create a PREFS file you need to create an instance of the PREFS class passing in the ",(0,i.kt)("inlineCode",{parentName:"p"},"prefs")," parameter a dictionary with the default PREFS (default means that all users will have at first time and when removing the file):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'UserPrefs = PREFS.PREFS(prefs = {\n    "theme": "light",\n    "lang": "en",\n    "keybindings": {"Copy": "Ctrl+C", "Paste": "Ctrl+V", "Cut": "Ctrl+X"}\n    })\n')),(0,i.kt)("p",null,"You can change the PREFS filename by changing ",(0,i.kt)("a",{parentName:"p",href:"/PREFS/API%20Reference/prefs-class#init"},(0,i.kt)("inlineCode",{parentName:"a"},"filename"))," parameter, or ",(0,i.kt)("a",{parentName:"p",href:"/PREFS/API%20Reference/prefs-class#init"},(0,i.kt)("inlineCode",{parentName:"a"},"extension"))," parameter in PREFS class."),(0,i.kt)("p",null,"If you open your PREFS file (by default ",(0,i.kt)("inlineCode",{parentName:"p"},"prefs.prefs"),"), you will see something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#PREFS\ntheme='light'\nlang='en'\nkeybindings=>\n    Copy='Ctrl+C'\n    Paste='Ctrl+V'\n    Cut='Ctrl+X'\n")),(0,i.kt)("h2",{id:"read-prefs"},"Read PREFS"),(0,i.kt)("p",null,"To access to your PREFS file you can call the ",(0,i.kt)("a",{parentName:"p",href:"/PREFS/API%20Reference/prefs-class/#readprefs"},(0,i.kt)("inlineCode",{parentName:"a"},"read_prefs()"))," method or access to the ",(0,i.kt)("a",{parentName:"p",href:"/PREFS/API%20Reference/prefs-class/#file"},(0,i.kt)("inlineCode",{parentName:"a"},"file"))," attribute, both returns a dictionary with your PREFS:"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"read_prefs()")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"print(UserPrefs.read_prefs()) # Getting PREFS with read_prefs() method and printing it\n\n>>> {'theme': 'light', 'lang': 'en', 'keybindings': {'Copy': 'Ctrl+C', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}}\n")),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"print(UserPrefs.file) # Getting PREFS with file attribute and printing it\n\n>>> {'theme': 'light', 'lang': 'en', 'keybindings': {'Copy': 'Ctrl+C', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}}\n")),(0,i.kt)("h2",{id:"write-prefs"},"Write PREFS"),(0,i.kt)("p",null,"To change the value of a pref you need to use ",(0,i.kt)("a",{parentName:"p",href:"/PREFS/API%20Reference/prefs-class/#writeprefs"},(0,i.kt)("inlineCode",{parentName:"a"},"write_prefs()"))," method which requires:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pref (str)"),": The name of the pref to modify or create if it doesn't exist."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value (any)"),": The value to assign to the given pref.")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'print(UserPrefs.file["lang"]) # Getting the lang value from the PREFS and printing it\n>>> en\n\nUserPrefs.write_prefs("lang", "es") # Changing the lang value from en to es\n\nprint(UserPrefs.file["lang"]) # Getting the lang value from the PREFS and printing it\n>>> es\n')),(0,i.kt)("p",null,"If you want to change the value of a nested dictionary you need to pass the keys path separated by a forward slash.\nIn this case we will change the value of ",(0,i.kt)("inlineCode",{parentName:"p"},'"Copy"')," which is inside ",(0,i.kt)("inlineCode",{parentName:"p"},'"keybindings"')," so our path should ",(0,i.kt)("inlineCode",{parentName:"p"},'"keybindings/Copy"'),":   "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"print(UserPrefs.file[\"keybindings\"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {'Copy': 'Ctrl+C', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}\n\nUserPrefs.write_prefs(\"keybindings/Copy\", \"Ctrl+D\") # Changing the Copy value inside the dictionary keybindings inside the PREFS file from Ctrl+C to Ctrl+D\n\nprint(UserPrefs.file[\"keybindings\"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {'Copy': 'Ctrl+D', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}\n")),(0,i.kt)("p",null,"In the above example we have accessed to a nested dictionary using the keys path and modified the pref ",(0,i.kt)("inlineCode",{parentName:"p"},'"Copy"')," from ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl+C")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl+D"),"."),(0,i.kt)("p",null,"As you know a PREFS file is like a Python dictionary so if you pass any key that isn't in the PREFS file it will be created:\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"print(UserPrefs.file[\"keybindings\"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {'Copy': 'Ctrl+D', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X'}\n\nUserPrefs.write_prefs(\"keybindings/Quit\", \"Ctrl+Q\") # Creating the Quit pref inside keybindings dictionary inside the PREFS file with Ctrl+Q as value\n\nprint(UserPrefs.file[\"keybindings\"]) # Getting the keybindings value (which is a dictionary) from the PREFS and printing it\n>>> {'Copy': 'Ctrl+D', 'Paste': 'Ctrl+V', 'Cut': 'Ctrl+X', 'Quit': 'Ctrl+Q'}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"if-you-like-prefs-please-consider-giving-it-a-star-on-github"},"If you like ",(0,i.kt)("strong",{parentName:"h3"},(0,i.kt)("em",{parentName:"strong"},"PREFS"))," please consider giving it a star on ",(0,i.kt)("a",{parentName:"h3",href:"https://github.com/Patitotective/PREFS"},"GitHub"))))}u.isMDXComponent=!0}}]);